#!/bin/bash

DOWNLOAD=https://ftp.gnu.org/gnu/gcc/gcc-15.1.0/gcc-15.1.0.tar.xz

BUILD_PASS1_DIR=build-pass1
BUILD_PASS2_DIR=build-pass2

function do_pass1 {
	sed -e '/m64=/s/lib64/lib/' -i.orig gcc/config/i386/t-linux64
	
	if [ ! -d $BUILD_PASS1_DIR ]; then
		mkdir -v $BUILD_PASS1_DIR
	fi
	pushd $BUILD_PASS1_DIR > /dev/null

	../configure --target=$LFS_TGT \
				 --prefix=$LFS/tools \
				 --with-glibc-version=2.41 \
				 --with-sysroot=$LFS \
				 --with-newlib \
				 --without-headers \
				 --enable-default-pie \
				 --enable-default-ssp \
				 --disable-nls \
				 --disable-shared \
				 --disable-multilib \
				 --disable-threads \
				 --disable-libatomic \
				 --disable-libgomp \
				 --disable-libquadmath \
				 --disable-libssp \
				 --disable-libvtv \
				 --disable-libstdcxx \
				 --enable-languages=c,c++ && make && make install
	popd > /dev/null
	cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
		`dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include/limits.h
}

function do_pass2 {
	sed '/thread_header =/s/@.*@/gthr-posix.h/' -i libgcc/Makefile.in libstdc++-v3/include/Makefile.in

	if [ ! -d $BUILD_PASS2_DIR ]; then
		mkdir -v $BUILD_PASS2_DIR
	fi
	pushd $BUILD_PASS2_DIR > /dev/null

	../configure --build=$(../config.guess) \
				 --host=$LFS_TGT \
				 --target=$LFS_TGT \
				 LDFLAGS_FOR_TARGET=-L$PWD/$LFS_TGT/libgcc \
				 --prefix=/usr \
				 --with-build-sysroot=$LFS \
				 --enable-default-pie \
				 --enable-default-ssp \
				 --disable-nls \
				 --disable-multilib \
				 --disable-libatomic \
				 --disable-libgomp \
				 --disable-libquadmath \
				 --disable-libsanitizer \
				 --disable-libssp \
				 --disable-libvtv \
				 --enable-languages=c,c++ && make && make DESTDIR=$LFS install
	ln -sv gcc $LFS/usr/bin/cc
	popd > /dev/null
}

function get_dependencies {
	dependencies=(https://ftp.gnu.org/gnu/mpfr/mpfr-4.2.2.tar.xz https://ftp.gnu.org/gnu/mpc/mpc-1.3.1.tar.gz https://ftp.gnu.org/gnu/gmp/gmp-6.3.0.tar.xz)
	for dependency in "${dependencies[@]}"; do
		archive=`basename $dependency`
		decompressed_archive=${archive%.tar.*}
		dependency_name=${decompressed_archive%-*}
		if [ ! -e ../$archive ]; then
			wget -P .. $dependency
		fi
		if [ ! -d $dependency_name ]; then
			tar -xf ../$archive
			mv -v $decompressed_archive $dependency_name
		fi
	done
}

function build {
	get_dependencies
	if [ ! -d $BUILD_PASS1_DIR ]; then
		do_pass1
	elif [ ! -d $BUILD_PASS2_DIR ]; then
		do_pass2
	else
		echo "already built both passes of gcc"
	fi
}
