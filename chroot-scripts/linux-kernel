#!/bin/bash

join_by() {
	local IFS="$1"
	shift
	echo "$*"
}

get_firmwares() {
	PACKAGE=linux-firmware enter_package_source
	firmwares=()
	local links
	declare -A links # only meant for npu.sbin
	for match in $(dmesg | grep -Eo "(Loading firmware from|using built-in) .+$" | awk '{ if($2 ~ "built-in") print $3; else print $4; }'); do
		host_path=${match%.zst}
		host_path=${host_path#/lib/firmware/}
	
		components=(${host_path//\//' '})
		vendor=${components[0]}
		repo_path=($vendor)
		for component in ${components[@]:1}; do
			set +e
			target=$(cat WHENCE | grep -Po "(?<=Link: $(join_by '/' ${repo_path[@]} $component) -> ).+")
			if [ $? -eq 0 ]; then
				for target_component in $(echo ${target//\//' '}); do
					case $target_component in
						..) repo_path=(${repo_path[@]::(${#repo_path[@]}-1)});;
						*)  repo_path[${#repo_path[@]}]=$target_component;;
					esac
				done
			else
				repo_path[${#repo_path[@]}]=$component
			fi
			set -e
		done
	
		if [ -e $(join_by '/' ${repo_path[@]}) ]; then
			if [ "${repo_path[*]}" != "${components[*]}" ]; then
				links[${repo_path[-1]}]=${match%.zst}
			fi
			firmwares[${#firmwares[@]}]=$(join_by '/' ${repo_path[@]})
		else
			echo "did not find $match in repo"
		fi
	done

	if [ ${#firmwares[@]} -eq 0 ]; then
		echo "unable to determine firmwares used"
	else
		cp -Rv --parents ${firmwares[@]} /lib/firmware
		for link_target in ${!links[*]}; do
			ln -sfv $link_target ${links[$link_target]}
		done
	fi
	popd
	popd
}

do_build() {
	set +e
	make mrproper
	set -e

	if [ ! -e lfs-config ]; then
		make x86_64_defconfig
	else
		cp -v lfs-config .config
	fi

	get_firmwares	
	
	local program="/CONFIG_EXTRA_FIRMWARE=/ c CONFIG_EXTRA_FIRMWARE=\"${firmwares[@]}\""
	sed "$program" -i .config
	make oldconfig

	make menuconfig
	make
	make modules_install

	local kernel_release=$(cat include/config/kernel.release)
	local kernel_file=/boot/vmlinuz-$kernel_release-lfs
	cp -iv arch/x86/boot/bzImage $kernel_file
	cp -iv System.map /boot/System.map-$kernel_release

	cp -iv .config /boot/config-$kernel_release

	cp -r Documentation -T /usr/share/doc/linux-$kernel_release

	local grub_cfg=/boot/grub/grub.cfg
	cat > $grub_cfg << "EOF"
set default=0
set timeout=5

insmod part_gpt
insmod ext2

EOF
	local kernel_device=$(mount -l | grep "on / type" | cut -d' ' -f 1)
	local device_data=$(lsblk -o UUID,PARTUUID,PATH | grep "$kernel_device")
	echo "search --set=root --fs-uuid $(echo $device_data | cut -d' ' -f 1)" >> $grub_cfg
	cat >> $grub_cfg << "EOF"

insmod efi_gop
insmod efi_uga
if loadfont /boot/grub/fonts/firamono.pf2; then
        terminal_output gfxterm
elif loadfont /boot/grub/fonts/unicode.pf2; then
        terminal_output gfxterm
fi

EOF
	echo "menuentry \"GNU/Linux, Linux $kernel_release-LFS\" {" >> $grub_cfg
	echo "	linux $kernel_file root=PARTUUID=$(echo $device_data | cut -d' ' -f 2) ro" >> $grub_cfg
	cat >> $grub_cfg << "EOF"
}

menuentry "Firmware setup" {
	fwsetup
}
EOF
}
