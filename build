#!/bin/bash

. automation-globals

set +h
set -e
set -u
set -x

function setup_lfs {
	BUILD_USER=$USER
	LFS_TERM=$TERM
	unset $(env | cut -d= -f1)
	umask 022

	LFS=/mnt/lfs

	PATH=/usr/bin
	if [ ! -L /bin ]; then PATH=/bin:$PATH; fi
	PATH=$LFS/tools/bin:$PATH

	LC_ALL=POSIX
	LFS_TGT=$(uname -m)-lfs-linux-gnu
	CONFIG_SITE=$LFS/usr/share/config.site
	MAKEFLAGS=-j$(nproc)
	export LC_ALL LFS LFS_TGT PATH CONFIG_SITE MAKEFLAGS

	(. version-check)

	if [ ! -d $LFS ]; then
		sudo mkdir -pv $LFS
		sudo chown root:root $LFS
		sudo chmod 755 $LFS
	fi

	(
		set +e
		mount | grep $LFS > /dev/null
		if [ $? -ne 0 ]; then
			sudo mount -v -t ext4 ${lfs_device:?Device to be mounted for LFS root is required by passing -l <device>} $LFS
		fi
	)

	sudo chown root:root $LFS
	sudo chmod 755 $LFS

	root_directories=(etc var usr/{bin,lib,sbin} lib64 tools sources)
	for directory in ${root_directories[@]}; do
		if [ ! -d $LFS/$directory ]; then
			sudo mkdir -pv $LFS/$directory
		fi
	done

	sudo chmod -v a+wt $LFS/sources

	for i in bin lib sbin; do
		if [ ! -L $LFS/$i ]; then
			sudo ln -sv usr/$i $LFS/$i
		fi
	done

	relaxed_directories=(usr{,/*} var etc tools lib64)
	for directory in ${relaxed_directories[@]}; do
		sudo chown -v $BUILD_USER $LFS/$directory;
	done

	download_packages
}

download_packages() {
	while read entry; do
		local package=$(echo $entry | awk '{ print $1 }')
		local urls=($(echo $entry | awk '{ urls=""; for(i=2; i<=NF; i+=1) urls=urls $i " "; print urls }'))
		local package_archive=$(basename ${urls[0]})
		
		if [ ! -d $LFS/sources/$package ]; then
			mkdir -v $LFS/sources/$package
		fi
		pushd $LFS/sources/$package
		for url in ${urls[@]}; do
			local target=$(basename $url)
			if [ ! -e $target ]; then
				wget $url
			fi
		done
		
		local package_directory=$(get_decompressed_archive $package_archive)
		if [ ! -d $package_directory ]; then
			if [ .zip == ${package_archive: -4} ]; then
				unzip -d $package_directory $package_archive
			else
				tar -xf $package_archive
			fi
		fi
		popd
	done < PACKAGES
}

function DEFAULT_CONFIGURE_ARGS {
	echo "--prefix=/usr \
		  --host=$LFS_TGT \
		  --build=$(build-aux/config.guess)"
}

function build {
	./configure $(DEFAULT_CONFIGURE_ARGS) && make && make DESTDIR=$LFS install
}

function do_phase1 {
	for variable in LFS LFS_TGT LC_ALL PATH CONFIG_SITE MAKEFLAGS; do
		echo "checking variable $variable with value ${!variable}"
		([ ! -v $variable ] || [ -z ${!variable} ]) && echo "required variable $variable is unset or empty" && exit 1;
	done
	PACKAGES_PATH=$(realpath PACKAGES)

	steps=(binutils gcc linux-headers glibc libstdc++ \
		   m4 ncurses bash coreutils diffutils file \
		   findutils gawk grep gzip make patch sed tar xz \
		   binutils-pass2 gcc-pass2)
	if [ -v start_script ]; then
		for i in $(seq ${#steps[@]}); do
			j=$((i-1))
			step=${steps[$j]}
			if [ $step == $start_script ]; then
				steps=(${steps[@]:$j})
				echo starting at step ${steps[0]}
				break
			fi
		done
	fi

	shopt -s extglob
	for step in ${steps[@]}; do
		echo doing step $step
		step_script=`realpath "phase1/$step"`

		(
			. $step_script
			enter_package_source
			build
		)
	done;
}

lfs_mount() {
	echo "attempting to mount ${!#}"
	set +e
	mount | grep "on ${!#}"
	local return_value=$?
	set -e
	if [ $return_value -eq 0 ]; then
		return
	fi
	echo "executing: $@"
	$@
}

copy_kernel_config() {
	local archive=$(basename $(cat PACKAGES | grep "^linux-kernel" | awk '{ print $2; }'))
	pushd $LFS/sources/linux-kernel > /dev/null
	local kernel_directory=$(get_decompressed_archive $archive)
	popd > /dev/null
	cp -v $1 $LFS/sources/linux-kernel/$kernel_directory/lfs-config
}

function setup_chroot {
	echo "setting up chroot environment..."
	sudo chown --from $BUILD_USER -R root:root $LFS/{usr,var,etc,tools,lib64}

	for directory in $LFS/{dev,proc,sys,run}; do
		if [ ! -d $directory ]; then
			sudo mkdir -pv $directory
		fi
	done

	lfs_mount sudo mount -v --bind /dev $LFS/dev
	lfs_mount sudo mount -vt devpts devpts -o gid=5,mode=0620 $LFS/dev/pts
	lfs_mount sudo mount -vt proc proc $LFS/proc
	lfs_mount sudo mount -vt sysfs sysfs $LFS/sys
	lfs_mount sudo mount -vt tmpfs tmpfs $LFS/run

	if [ -h $LFS/dev/shm ]; then
		sudo install -v -d -m 1777 $LFS$(realpath /dev/shm)
	else
		lfs_mount sudo mount -vt tmpfs -o nosuid,nodev tmpfs $LFS/dev/shm
	fi

	sudo cp -Rv ./chroot-scripts $LFS
	sudo cp -Rv automation-globals PACKAGES $LFS/chroot-scripts

	local prompt
	local default
	local host_config=$(find /boot -name "config*" | head -n 1)
	if [ -z "$host_config" ]; then
		prompt="[G]enerate default kernel config or provide path? (G/<path to kernel config>)"
		default=g
	else
		prompt="[G]enerate default kernel config, [u]se ${host_config}, or provide path? (U/g/<path to kernel config>): "
		default=u
	fi
	read -p "$prompt" choice
	case ${choice:=$default} in
		u|U) copy_kernel_config $host_config;;
		g|G) echo "Will generate an x86_64_defconfig config in the chroot environment";;
		*) \
			if [ ! -e $choice ]; then
				echo "Unrecognized choice or path not found: $choice"
				exit 1
			else
				copy_kernel_config $choice
			fi;;
	esac

	sudo chroot "$LFS" /usr/bin/env -i \
				HOME=/root		\
				TERM="$LFS_TERM"	\
				PS1='(lfs chroot) \u:\w\$ '	\
				PATH=/usr/bin:/usr/sbin		\
				MAKEFLAGS="-j$(nproc)"		\
				TESTSUITEFLAGS="-j$(nproc)"	\
				LFS_CHROOT=1 \
				LFS_CHROOT_START_SCRIPT=${start_script:-} \
				/bin/bash /chroot-scripts/manager
}



#if [ ! -v do_build ]; then
	#setup_lfs
	#echo "launching phase1 as lfs user"
	#su lfs -s /bin/bash -c "bash `realpath $0` -b"
#else
	#do_phase1
#fi

while getopts ":bcs:l:" option; do
	case $option in
		b) do_build= ;;
		c) setup_lfs; setup_chroot; exit 0;;
		s) start_script=$OPTARG;;
		l) lfs_device=$OPTARG;;
		*) 
			echo "bad option: " $option
			exit ;;
	esac
done

setup_lfs
do_phase1
